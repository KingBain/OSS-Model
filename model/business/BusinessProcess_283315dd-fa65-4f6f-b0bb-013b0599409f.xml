<archimate:BusinessProcess
    xmlns:archimate="http://www.archimatetool.com/archimate"
    name="Actively and Fairly Consider Open Source Software"
    id="283315dd-fa65-4f6f-b0bb-013b0599409f"
    documentation="Be aware that open source software is not completely free, so take into account the total cost of ownership (TCO) of migrating, including exit, transition, and support costs.&#xD;&#xA;&#xD;&#xA;Be Aware of Open Core&#xD;&#xA;A solution that is built with open source software but requires the use of closed-source components should not be considered open source software for the purpose of this guide. The open core development model is where vendors open only portions of their software and then surround the remainder with closed-source offerings, as well as the model where a user such as Canada augments already licenced proprietary software with open source software. The “free” open source software versions often referred to as “community” editions are recommended first. See Verify Open Source Software Ownership or Licence.&#xD;&#xA;&#xD;&#xA;Selecting Open Source Software First&#xD;&#xA;The mandatory procedures for enterprise architecture assessment ( see annex C of the Directive on Management of Information Technology ) require application architecture – for both new technology and upgrade/migration of existing solutions – to prioritize the use of open source software as well as open standards. Doing so maximizes the substitutability and interoperability of software components and opens the door to creating highly flexible solutions. It also helps mitigate the significant risks which arise from lock-in and similar issues.&#xD;&#xA;&#xD;&#xA;Sometimes an open source solution meets most user needs but would require additional investment to develop missing functionality (see Guide for Contributing to Open Source Software). In these cases, this investment must be considered by weighing the total cost of ownership against those of other candidate solutions.&#xD;&#xA;&#xD;&#xA;Evaluation&#xD;&#xA;The same factors applicable to an evaluation of the feature set and maturity of closed-source software also apply to open source software. Additional criteria should be assessed when evaluating open source software:&#xD;&#xA;&#xD;&#xA;User Community&#xD;&#xA;A strong user community involved in a project provides people to answer questions, test the software, report bugs, suggest improvements and drive forward overall interest in the software. Look at the software’s public code repository and check the project popularity by looking at the number of likes and followers. Check how active the project responds to users by looking at issues and the time between replies.&#xD;&#xA;&#xD;&#xA;Developer Community&#xD;&#xA;A strong developer community with a history of releases and continued involvement tends to demonstrate that fixes and improvements to the software will continue into the future. Look at who are the core developers and who is supporting the project and community, such as a non-profit Foundation. Look at when the project got started, the pace of releases and responses to requests to merge code from contributors.&#xD;&#xA;&#xD;&#xA;Documentation&#xD;&#xA;User documentation provides important information to help users install software and use its features. Technical documentation provides requirements and instructions for installation, development, deployment and configuration of the software.&#xD;&#xA;&#xD;&#xA;Security Assessments&#xD;&#xA;Although OSS code is auditable, this does not necessarily mean it is secure. The quality of the code and the typical response time for patching security-related flaws help indicate the security maturity level of the software.&#xD;&#xA;&#xD;&#xA;As per any software, you should maintain best practices and have a process in place to list all packages in use as well as their version in order to patch them promptly."/>
